<?php
/**
 * @file
 * Integration between BackdropCMS.org and Tugboat (our demo sandbox provider).
 */

/**
 * Implements hook_menu().
 */
function borg_tugboat_menu() {
  $items['admin/config/system/tugboat'] = array(
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('borg_tugboat_admin_settings'),
    'access arguments' => array('administer tugboat settings'),
    'title' => 'Tugboat settings',
    'file' => 'borg_tugboat.admin.inc',
  );
  $items['demo/create'] = array(
    'page callback' => 'borg_tugboat_demo_create_page',
    'page arguments' => array(),
    'access callback' => TRUE,
    'title' => 'Try a Backdrop CMS Demo Sandbox',
    'file' => 'borg_tugboat.pages.inc',
  );
  $items['demo/created'] = array(
    'page callback' => 'borg_tugboat_demo_done_page',
    'page arguments' => array(),
    'access callback' => TRUE,
    'title' => 'Your Backdrop CMS Demo is Ready!',
    'file' => 'borg_tugboat.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function borg_tugboat_permission() {
  $items['administer tugboat settings'] = array(
    'title' => t('Administer Tugboat settings'),
    'description' => t('Configure the lifetime and repository settings for Tugboat (used for demo sites).'),
  );
}

/**
 * Implements hook_theme().
 */
function borg_tugboat_theme() {
  $items['borg_tugboat_demo_create_page'] = array(
    'variables' => array('form' => NULL),
    'template' => 'templates/borg-tugboat-demo-create-page',
  );
  $items['borg_tugboat_demo_done_page'] = array(
    'variables' => array('url' => NULL),
    'template' => 'templates/borg-tugboat-demo-done-page',
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function borg_tugboat_cron() {
  $config = config('borg_tugboat.settings');
  // Run on an interval that matches the length of the current lifetime.
  $lifetime_timestamp = 10; //$config->get('sandbox_lifetime');
  if (REQUEST_TIME - state_get('borg_tugboat_cron', 0) > $lifetime_timestamp) {
    //state_set('borg_tugboat_cron', REQUEST_TIME);

    $delete_older_than_timestamp = REQUEST_TIME - $lifetime_timestamp;

    $repo = $config->get('repository_id');
    $return_data = array();
    $error_string = '';
    $success = _borg_tugboat_execute("ls previews repo=$repo", $return_data, $error_string);
    if (!$success) {
      watchdog('borg_tugboat', 'Unable to select sandboxes during cron run. Error from tugboat: @error', array('@error' => $error_string), WATCHDOG_ERROR);
    }

    $delete_count = 0;
    foreach ($return_data as $sandbox) {
      // Delete if not a base (anchor) preview and it's past the expire date.
      if (!$sandbox['anchor'] && strtotime($sandbox['createdAt']) < $delete_older_than_timestamp) {
        $sandbox_id = $sandbox['id'];
        $success = _borg_tugboat_execute("delete $sandbox_id", $return_data, $error_string);
        if (!$success) {
          watchdog('borg_tugboat', 'Unable to delete individual sandbox during cron run. Error from tugboat: @error', array('@error' => $error_string), WATCHDOG_ERROR);
        }
        else {
          $delete_count++;
        }
      }
    }

    if ($delete_count) {
      watchdog('borg_tugboat', 'Deleted @count demo sandboxes older than @date.', array('@count' => $delete_count, '@date' => format_date($delete_older_than_timestamp)));
    }
  }
}

/**
 * Execute a Tugboat CLI command.
 *
 * @param $command_string
 *   The tugboat command string with any options. The --api-token and --json
 *   options are passed automatically. Tugboat command portion should be
 *   specified in this string, such as "find <id>" or "stop <id>".
 * @param array $return_data
 *   Returned data as an array if the command was successful.
 * @param $return_error_string
 *   A single error string if tugboat returned an error or if it is not possible
 *   to reach tugboat.
 * @param string $executable_path
 *   Optional. The path to the executable on the server. If not provided, the
 *   executable path provided in the config file will be used.
 *
 * @return bool
 */
function _borg_tugboat_execute($command_string, array &$return_data, &$return_error_string, $executable_path = NULL) {
  $api_token = settings_get('borg_tugboat_token');
  if (empty($executable_path)) {
    $executable_path = config_get('borg_tugboat.settings', 'executable_path');
  }

  // Ensure binary is executable.
  if (!is_file($executable_path)) {
    $return_error_string = t('No tugboat executable file found at the provided path.');
    return FALSE;
  }
  elseif (!is_executable($executable_path)) {
    $return_error_string = t('The Tugboat CLI binary was found, but it is not executable.');
    return FALSE;
  }

  // Ensure input string is safe from any dangerous characters.
  // Characters allowed: 0-9, a-z, ., =, +, -, and a blank space.
  if (!preg_match('/^[0-9a-z=+\- ]+$/', $command_string)) {
    $return_error_string = t('Invalid character for Tugboat command. String given: @string', array('@string' => $command_string));
    return FALSE;
  }

  // Fire off the command via the binary file.
  $pipe_spec = array(
    0 => array("pipe", "r"),  // stdin pipe to send input.
    1 => array("pipe", "w"),  // stdout pipe to receive output.
    2 => array("pipe", "w")   // errors pipe to receive output.
  );
  $pipes = array();

  $command = "$executable_path --api-token='$api_token' $command_string --json";
  $process = proc_open($command, $pipe_spec, $pipes);
  fclose($pipes[0]);
  $std_output = stream_get_contents($pipes[1]);
  $error_output = stream_get_contents($pipes[2]);
  fclose($pipes[1]);
  fclose($pipes[2]);
  $process_status = proc_get_status($process);
  $process_exit_code = $process_status['exitcode'];
  proc_close($process);

  if ($error_output) {
    $return_error_string = trim($error_output);
  }
  if ($std_output) {
    $decoded_json = json_decode($std_output, TRUE);
    if ($decoded_json === NULL) {
      // Work-around https://github.com/Lullabot/tugboat/issues/2999.
      // Use the last line of JSON output and ignore any progress information.
      if ($process_exit_code === 0) {
        $lines = explode("\n", $std_output);
        $last_line = end($lines);
        if ($decoded_json = json_decode($last_line, TRUE)) {
          $return_data = $decoded_json;
        }
      }

      $return_error_string = 'Unparseable JSON returned.';
    }
    else {
      $return_data = $decoded_json;
    }
  }

  return $process_exit_code === 0;
}

/**
 * Provide a form that creates a new sandbox.
 */
function borg_tugboat_single_button_form($form, &$form_state) {
  $form['repo'] = array(
    '#type' => 'value',
    '#value' => config_get('borg_tugboat.settings', 'repository_id'),
  );
  $form['ref'] = array(
    '#type' => 'value',
    '#value' => config_get('borg_tugboat.settings', 'repository_base'),
  );
  $form['create_sandbox'] = array(
    '#type' => 'submit',
    '#value' => t('Try a Demo'),
    '#submit' => array('borg_tugboat_single_button_form_submit'),
    '#attributes' => array('class' => array('button', 'demo')),
  );

  return $form;
}


/**
 * Submit handler for borg_tugboat_single_button_form().
 */
function borg_tugboat_single_button_form_submit($form, &$form_state) {
  $ref = $form_state['values']['ref'];
  $repo = $form_state['values']['repo'];
  $arguments = array(
    'ref' => $ref,
    'repo' => $repo,
    'time' => REQUEST_TIME,
    'token' => backdrop_get_token($ref . $repo . REQUEST_TIME),
  );
  $form_state['redirect'] = array('demo/create', array('arguments' => $arguments));
}
